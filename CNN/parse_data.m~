% takes all .xls in current folder and
% converts them to two cell arrays, train and test
% format is: train_data = {ex1, ex2 ...}
% files must be in format 'blahblah_label.xls' (ex: 'andrew_jump.xls')
% time values must occupy the first column and start at 0
function [train_data, train_labels, test_data, test_labels] = parse_data()
    % parse folder for all .xls file names
    addpath('data')
    file_names = {};
    all_files = dir('data');
    all_names = {all_files.name};
    for i = 1:numel(all_names)
        try
            if all_names{i}(end-3:end) == ".xls"
                file_names{end+1} = all_names{i};
            end
        catch
        end
    end
    
    % initialize cell array of all datasets
    data_raw = cell(1,numel(file_names));
    % remove titles (first row) of each data set and add data
    % data format is:
    % {{{t, x_acc, y_acc, z_acc, abs_acc}, "label"}, ...}
    % where t, x_acc ... are 1 x n cell arrays
    for i = 1:numel(file_names)
        data_raw{i}{1} = readmatrix(file_names{i});
        % get label from filename
        if contains(file_names{i}, "walk")
            data_raw{i}{2} = 'walk';
        elseif contains(file_names{i}, "run")
            data_raw{i}{2} = 'run';  
        elseif contains(file_names{i}, "jump")
            data_raw{i}{2} = 'jump';
        else
            error("Error: check that .xls files are properly named");
        end
    end
    
    % define all data as cell array of example objects
    data_all = {};
    labels_all = {};
    % seperate data into 5 second chunks
    t_sep = 5; % this can be adjusted
    for i = 1:numel(data_raw)
        label = data_raw{i}{2};
        data = data_raw{i}{1};
        % convert any 0.005 s sampling rates to 0.01 s
        if (data(11,1) - data(1,1)) - 0.05 < 0.02
            data = data(1:2:end,:);
        end
        % parse through t, creating dataset every 5 sec
        j = 0;
        while true
            try
                data_all{end+1} = data(j*500+1:(j+1)*500, 2:end); % remove t
                labels_all{end+1} = label;
            catch
                break
            end
            j = j + 1;
        end
    end
    
    % sort all examples into train and test randomly
    train_data = [];
    train_labels = {};
    test_data = [];
    test_labels = {};
    %rand_val = randsample(0:1/numel(data_all):1, numel(data_all));
    for i = 1:numel(data_all)
        if mod(i, 4) rand >= 0.1
            train_data = cat(3, data_all{i}, train_data);
            train_labels{end+1} = labels_all{i};
        else
            test_data = cat(3, data_all{i}, test_data);
            test_labels{end+1} = labels_all{i};
        end
    end
    train_labels = categorical(transpose(train_labels));
    test_labels = categorical(transpose(test_labels));
    
end